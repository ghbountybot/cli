name: Publish Package

on:
  push:
    tags:
      - 'v*'

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: bounty
            packages: pkg-config libssl-dev
          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: bounty
            packages: openssl@3
            arch: arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: bounty.exe
            packages: openssl
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      # Install system dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.packages }}

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install ${{ matrix.packages }}
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV

      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          vcpkg integrate install
          vcpkg install openssl:x64-windows-static
          echo "OPENSSL_ROOT_DIR=$env:VCPKG_INSTALLATION_ROOT/installed/x64-windows-static" >> $env:GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$env:VCPKG_INSTALLATION_ROOT/installed/x64-windows-static/lib" >> $env:GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$env:VCPKG_INSTALLATION_ROOT/installed/x64-windows-static/include" >> $env:GITHUB_ENV
          
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Cache cargo registry and build outputs
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      # Cache system dependencies
      - uses: actions/cache@v4
        if: runner.os == 'Windows'
        with:
          path: C:/vcpkg/installed
          key: ${{ runner.os }}-vcpkg-${{ matrix.target }}-${{ hashFiles('**/vcpkg.json') }}

      - uses: actions/cache@v4
        if: runner.os == 'macOS'
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Cellar/openssl@3
          key: ${{ runner.os }}-brew-${{ matrix.target }}-${{ hashFiles('**/Brewfile') }}
      
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          OPENSSL_STATIC: 1
          MACOSX_DEPLOYMENT_TARGET: "10.13"
          RUSTFLAGS: "-C link-arg=-s"  # Strip symbols for smaller binaries
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  publish:
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: javascript
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v2
        with:
          version: 9
          working-directory: javascript
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'
          cache-dependency-path: javascript/pnpm-lock.yaml
      
      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: temp-binaries

      - name: Prepare binaries
        run: |
          mkdir -p bin
          cp ../temp-binaries/binary-x86_64-unknown-linux-gnu/bounty bin/bounty-x86_64-unknown-linux-gnu
          cp ../temp-binaries/binary-aarch64-apple-darwin/bounty bin/bounty-aarch64-apple-darwin
          cp ../temp-binaries/binary-x86_64-pc-windows-msvc/bounty.exe bin/bounty-x86_64-pc-windows-msvc.exe
          chmod +x bin/*
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Set version from git tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          npm version $VERSION --no-git-tag-version
      
      - name: Publish to npm
        run: pnpm publish --no-git-checks --registry https://registry.npmjs.org/
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}} 